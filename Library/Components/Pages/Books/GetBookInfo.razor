@page "/book-info/{bookId:int}"
@inject Library.Services.Books.GetBookInfo getBookInfoService

<h3>GetBookInfo</h3>
@if (isLoading)
{
    <p>Loading...</p>
}
else if (bookInfoItems == null)
{
    <p>No books found.</p>
}
else
{
    <div class="book-results">
        @foreach (var bookInfoItem in bookInfoItems)
        {
                <div class="book-card">
                <img src="@bookInfoItem.Cover" alt="@bookInfoItem.Name" />
                <h3>@bookInfoItem.Name</h3>
                <p>Authors: @string.Join(", ", bookInfoItem.Authors)</p>
                <p>Rating: @bookInfoItem.Rating</p>
                <p>Pages: @bookInfoItem.Pages</p>
                <p>Synopsis: @bookInfoItem.Synopsis</p>
                </div>
        }
    </div>

}
@code {
    private List<BookInfoItems> bookInfoItems = new List<BookInfoItems>(); // Initialize to prevent null reference
    private bool isLoading = false;

    [Parameter]
    public int bookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBook();
    }
    private async Task GetBook()
    {
        isLoading = true;
        try
        {
            bookInfoItems = await getBookInfoService.GetBookInfoAsync(bookId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching books: {ex.Message}");
            bookInfoItems = new List<BookInfoItems>(); // Ensure books is initialized
        }
        finally
        {
            isLoading = false;
        }
    }
}
