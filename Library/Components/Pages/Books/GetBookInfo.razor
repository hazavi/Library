@page "/book-info/{bookId:int}"
@inject Library.Services.Books.GetBookInfo getBookInfoService

<div class="book-info-container">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (bookInfoItem == null)
    {
        <p>No book information found.</p>
    }
    else
    {
        <div class="book-info-card">
            <div class="book-cover">
                <img src="@bookInfoItem.Cover" alt="@bookInfoItem.Name" />
            </div>
            <div class="book-details">
                <h2>@bookInfoItem.Name</h2>
                <p class="authors"><strong>Authors:</strong> @string.Join(", ", bookInfoItem.Authors)</p>
                <p class="rating"><strong>Rating:</strong> @bookInfoItem.Rating</p>
                <p class="pages"><strong>Pages:</strong> @bookInfoItem.Pages</p>
                <p class="synopsis"><strong>Synopsis:</strong> @bookInfoItem.Synopsis</p>
            </div>
        </div>
    }
</div>

@code {
    private BookInfoItems bookInfoItem; // Changed to single object
    private bool isLoading = false;

    [Parameter]
    public int bookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBook();
    }

    private async Task GetBook()
    {
        isLoading = true;
        try
        {
            bookInfoItem = await getBookInfoService.GetBookInfoAsync(bookId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching book information: {ex.Message}");
            bookInfoItem = null; // Set to null on error
        }
        finally
        {
            isLoading = false;
        }
    }
}
